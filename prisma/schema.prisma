// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(uuid())
  email        String            @unique
  password     String?
  username     String            @unique
  rating       Float?
  imageUrl     String?
  refreshToken String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  profile      UserProfile?
  achievements UserAchievement[]
  donations    ProjectDonation[]
  volunteers   ProjectVolunteer[]
  projects     Project[]
  chats        Chat[]
  chatRooms    ChatRoomUser[]
}

model UserProfile {
  id           String    @id @default(uuid())
  bannerUrl    String?
  bio          String?
  birthDate    DateTime?
  address      String?
  phone        String?
  instagramUrl String?
  facebookUrl  String?
  twitterUrl   String?
  linkedinUrl  String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String    @unique
}

model UserAchievement {
  id          String @id @default(uuid())
  title       String
  description String
  imageUrl    String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
}

model Project {
  id           String               @id @default(uuid())
  title        String
  description  String
  imageUrl     String
  fundingGoal  Float
  funding      Float                @default(0)
  rating       Float?
  phase        String               @default("DONATING")
  objectives   ProjectObjective[]
  requirements ProjectRequirement[]
  donations    ProjectDonation[]
  volunteers   ProjectVolunteer[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  deadline     DateTime
  organizer    User                 @relation(fields: [organizerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizerId  String
}

model ProjectObjective {
  id        String  @id @default(uuid())
  objective String
  imageUrl  String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String
}

model ProjectRequirement {
  id          String  @id @default(uuid())
  requirement String
  quantity    Int?
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId   String
}

model ProjectDonation {
  id        String  @id @default(uuid())
  amount    Float
  donator   User    @relation(fields: [donatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  donatorId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String
}

model ProjectVolunteer {
  id          String  @id @default(uuid())
  volunteer   User    @relation(fields: [volunteerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  volunteerId String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId   String

  @@unique([volunteerId, projectId])

}

model ChatRoom {
  id        String     @id @default(uuid())
  title     String
  createdAt DateTime   @default(now())
  chats     Chat[]
  users     ChatRoomUser[]
}

model Chat {
  id          String   @id @default(uuid())
  message     String?
  image       String?
  userId      String
  createdAt   DateTime @default(now())

  chatRoomId  String
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model ChatRoomUser {
  chatRoomId String
  userId     String

  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([chatRoomId, userId])
}